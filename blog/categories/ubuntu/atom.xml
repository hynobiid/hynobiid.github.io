<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ubuntu | Harry's Personal Website]]></title>
  <link href="http://hynobiid.github.io/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://hynobiid.github.io/"/>
  <updated>2015-02-08T20:58:41+02:00</updated>
  <id>http://hynobiid.github.io/</id>
  <author>
    <name><![CDATA[Harry Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu: Suspend and reboot at specific times using Cron]]></title>
    <link href="http://hynobiid.github.io/blog/2015/02/08/ubuntu-suspend-and-reboot-at-specific-times-using-cron/"/>
    <updated>2015-02-08T20:13:47+02:00</updated>
    <id>http://hynobiid.github.io/blog/2015/02/08/ubuntu-suspend-and-reboot-at-specific-times-using-cron</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>If you have a server at home and you want it to be on only during specific times and not 24/7, this script is for you.<br>
Cron not only is the best tool for this, it also handles scheduled tasks. From the <a href="https://help.ubuntu.com/community/CronHowto">Ubuntu documentation</a>:</p>

<blockquote>
<p>Cron is a system daemon used to execute desired tasks (in the background) at designated times.</p>
</blockquote>

<h2>Method</h2>

<ol>
<li><p>First install Cron on Ubuntu if it is not already installed</p></li>
<li><p>Create a new file, <em>suspend_until</em>, in your ~/Documents/ and place the following in it. This script is written by Romke van der Meulen.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">  #!/bin/bash

  # Auto suspend and wake-up script
  #
  # Puts the computer on standby and automatically wakes it up at specified time
  #
  # Written by Romke van der Meulen &lt;redge.online@gmail.com&gt;
  # Minor mods fossfreedom for AskUbuntu
  #
  # Takes a 24hour time HH:MM as its argument
  # Example:
  # suspend_until 9:30
  # suspend_until 18:45

  # ------------------------------------------------------
  # Argument check
  if [ $# -lt 1 ]; then
  echo &quot;Usage: suspend_until HH:MM&quot;
  exit
  fi

  # Check whether specified time today or tomorrow
  DESIRED=$((`date +%s -d &quot;$1&quot;`))
  NOW=$((`date +%s`))
  if [ $DESIRED -lt $NOW ]; then
  DESIRED=$((`date +%s -d &quot;$1&quot;` + 24*60*60))
  fi

  # Kill rtcwake if already running
  sudo killall rtcwake

  # Set RTC wakeup time
  # N.B. change &quot;mem&quot; for the suspend option
  # find this by &quot;man rtcwake&quot;
  sudo rtcwake -a -m disk -t $DESIRED &amp;

  # feedback
  echo &quot;Suspending...&quot;

  # give rtcwake some time to make its stuff
  sleep 2

  # then suspend
  # N.B. dont usually require this bit
  #sudo pm-suspend

  # Any commands you want to launch after wakeup can be placed here
  # Remember: sudo may have expired by now

  # Wake up with monitor enabled N.B. change &quot;on&quot; for &quot;off&quot; if
  # you want the monitor to be disabled on wake
  xset dpms force on

  # and a fresh console
  clear
  echo &quot;Good morning!&quot;
</code></pre></div></li>
<li><p>Change the permission of the file so that it is executable.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">  sudo chmod +x ~/Documents/suspend_until
</code></pre></div></li>
<li><p>Run crontab</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">  sudo crontab -e
</code></pre></div></li>
<li><p>Place the following line at the end of the file.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">  00 02 * * * /home/user/Documents/suspend_until 09:00
</code></pre></div>
<p>This basically tells the server to execute the suspend script at <em>2:00 AM</em>. The <em>09:00</em> appended at the end of the line tells the server to wake up at <em>9:00 AM</em>. The details are all explained in the script.</p></li>
<li><p>Save the crontab file and reboot.</p></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu: Sharing externally connected drives over network]]></title>
    <link href="http://hynobiid.github.io/blog/2015/01/10/ubuntu-sharing-externally-connected-drives-over-network/"/>
    <updated>2015-01-10T14:29:59+02:00</updated>
    <id>http://hynobiid.github.io/blog/2015/01/10/ubuntu-sharing-externally-connected-drives-over-network</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>When you have external drives connected to the server, it would be very useful if you can share these drives to users accessing the server as well.</p>

<p>This post aims to share drives that are NTFS formatted and changing the permissions of the mounted drives.</p>

<h2>Method</h2>

<ol>
<li><p>Unmount the drive that is connected already and remount to another folder giving permissions to users.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo umount -l /dev/sdX1
</code></pre></div>
<p>Where sdX1 is the device ID.</p>

<p>To check the device ID:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">df
</code></pre></div>
<p>or</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">lsblk
</code></pre></div>
<p>Remount to another folder.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo mount -t ntfs-3g -o rw /dev/sdX1 /media/path/to/folder
</code></pre></div>
<p>This assumes that you are connecting a NTFS formatted drive.</p></li>
<li><p>Change the permission of the mount point to allow access to users.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo chown -R $USER:$USER /media/path/to/folder
</code></pre></div>
<p>This gives permission, both read and write, to any user that accesses the drive. You can adjust this accordingly.</p></li>
</ol>
]]></content>
  </entry>
  
</feed>
